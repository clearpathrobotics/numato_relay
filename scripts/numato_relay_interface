#!/usr/bin/env python
# Software License Agreement (proprietary)
#
# @author   Tony Baltovski <tbaltovski@clearpathrobotics.com>
# @copyright (c) 2018, Clearpath Robotics, Inc., All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, is not permitted without the
# express permission of Clearpath Robotics.

import rospy
import serial
from std_srvs.srv import SetBool, SetBoolResponse
import sys


class NumatoRelayInterface:
    def __init__(self):
        self.port = rospy.get_param('~port', '/dev/ttyACM0')
        self.baud = rospy.get_param('~baud', 19200)
        self.serial_port = serial.Serial(self.port, self.baud, timeout=1)

        rospy.Service('set_relay_0', SetBool, self.control_relay_0)
        rospy.Service('set_relay_1', SetBool, self.control_relay_1)

        while not rospy.is_shutdown():
            rospy.spin()

        self.serial_port.close()

    def control_relay(self, req, relay):
        if(req.data):
            cmd = str("on")
        else:
            cmd = str("off")

        self.serial_port.write(bytes(("relay " + cmd + " " + str(relay) + "\n\r").encode("utf-8")))
        self.serial_port.flush()
        self.serial_port.write(bytes(("relay read " + str(relay) + "\n\r").encode("utf-8")))

        # Response will be byte type; cast back to string.
        response = str(self.serial_port.read(25))
        if ((response.find("on") > 0) and (req.data)):
            state = True
            response = "Turn on relay"

        elif ((response.find("off") > 0) and (req.data == False)):
            state = True
            response = "Turn off relay"
        else:
            state = False
            response = "Unable to control relay"
        return SetBoolResponse(state, response)

    def control_relay_0(self, req):
        return self.control_relay(req, 0)

    def control_relay_1(self, req):
        return self.control_relay(req, 1)

if __name__ == "__main__":
    rospy.init_node('numato_relay_control_server')
    nri = NumatoRelayInterface()
