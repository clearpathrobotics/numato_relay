#!/usr/bin/env python3
# Software License Agreement (proprietary)
#
# @author   Tony Baltovski <tbaltovski@clearpathrobotics.com>
# @copyright (c) 2018, Clearpath Robotics, Inc., All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, is not permitted without the
# express permission of Clearpath Robotics.

import os
import rospy
import serial
import sys

from std_srvs.srv import SetBool, SetBoolResponse
from std_msgs.msg import Bool

from threading import Lock


class NumatoRelayInterface:
    def __init__(self):
        self.port = rospy.get_param('~port', '/dev/ttyACM0')
        self.baud = rospy.get_param('~baud', 19200)
        self.check_on_write = rospy.get_param('~check_on_write', True)

        if not os.path.exists(self.port):
            rospy.logwarn(f"Serial port {self.port} does not exist. Waiting for it to appear...")
            rate = rospy.Rate(1)
            while not os.path.exists(self.port) and not rospy.is_shutdown():
                rate.sleep()

            if not rospy.is_shutdown():
                rospy.loginfo(f"Serial port {self.port} showed up! Starting Numato relay interface node")
            else:
                rospy.loginfo("Shutting down Numato relay interface node")
                sys.exit(0)

        self.serial_port = serial.Serial(self.port, self.baud, timeout=1)
        self.SERIAL_READ_SIZE = 25

        self.serial_lock = Lock()

        self.gpio_to_read = rospy.get_param('~gpio_to_read', [])
        self.freq = float(rospy.get_param('~freq', 20.0))  # 20 Hz

        rospy.Service('set_relay_0', SetBool, self.control_relay_0)
        rospy.Service('set_relay_1', SetBool, self.control_relay_1)
        rospy.Service('set_relay_2', SetBool, self.control_relay_2)
        rospy.Service('set_relay_3', SetBool, self.control_relay_3)
        rospy.Service('set_relay_4', SetBool, self.control_relay_4)
        rospy.Service('set_relay_5', SetBool, self.control_relay_5)
        rospy.Service('set_relay_6', SetBool, self.control_relay_6)
        rospy.Service('set_relay_7', SetBool, self.control_relay_7)

        # The relay status topics are latched, since the only way to control them is via the ROS services
        # (we assume we own the serial interface, and nobody else can use it while we do)
        # The state is published once on startup (see read_initial_relay_states) and whenever the state changes
        # (see control_relay)
        self.relay_state_pubs = []
        self.relay_states = []
        for i in range(8):
            self.relay_states.append(None)  # we don't know the state initially; some relays might already be on!
            self.relay_state_pubs.append(rospy.Publisher(f'relay_state_{i}', Bool, queue_size=1, latch=True))

        # GPIO states are not latched since if they're being used as inputs we need to be able to read them quickly and
        # whoever's listening may care about consecutive on/off messages which would be lost with a latched topic
        self.pub_gpio_reads = []
        if (not self.gpio_to_read):
            rospy.loginfo("No GPIO to read.")
        else:
            for i in range(0, len(self.gpio_to_read)):
                rospy.loginfo(f"Reading GPIO from {self.gpio_to_read[i]}")
                self.pub_gpio_reads.append(rospy.Publisher(f"gpio/state/{self.gpio_to_read[i]}", Bool, queue_size=1))

        self.rate = rospy.Rate(self.freq)

    def run(self):
        self.read_initial_relay_states()

        while not rospy.is_shutdown():
            if (self.gpio_to_read):
                for i in range(0, len(self.gpio_to_read)):
                    state = Bool()
                    state.data = self.read_gpio(self.gpio_to_read[i])
                    self.pub_gpio_reads[i].publish(state)

            self.rate.sleep()

        self.serial_port.close()

    def read_initial_relay_states(self):
        # If we start the node and a relay is already on we need to know about it
        for i in range(len(self.relay_states)):
            self.serial_lock.acquire()
            self.serial_port.write(bytes(f"relay read {i} \n\r".encode("utf-8")))
            response = str(self.serial_port.read(self.SERIAL_READ_SIZE))
            self.serial_lock.release()

            self.relay_states[i] = response.find("on") > 0

        # the relay states are latched, so publish the initial states once we have them
        for i in range(len(self.relay_state_pubs)):
            self.relay_state_pubs[i].publish(Bool(self.relay_states[i]))

    def control_relay(self, req, relay):
        if (req.data):
            cmd = str("on")
        else:
            cmd = str("off")

        # check if we're actually changing the relay state; if we're setting it to its
        # current state, save some time and just return right away
        if self.relay_states[relay] == req.data:
            response = f"Relay is already {cmd}"
            state = True
        else:
            # control_relay may be called concurrently from multiple services
            # if this occurs, make sure only once service call owns the serial port at a time
            self.serial_lock.acquire()
            self.serial_port.write(bytes(f"relay {cmd} {relay}\n\r".encode("utf-8")))
            self.serial_port.flush()

            if self.check_on_write:
                self.serial_port.write(bytes(f"relay read {relay}\n\r".encode("utf-8")))
                # Response will be byte type; cast back to string.
                response = str(self.serial_port.read(self.SERIAL_READ_SIZE))
            else:
                response = cmd

            self.serial_lock.release()

            if ((response.find("on") >= 0) and (req.data)):
                state = True
                self.relay_states[relay] = req.data
                response = "Turn on relay"

            elif ((response.find("off") >= 0) and (not req.data)):
                state = True
                self.relay_states[relay] = req.data
                response = "Turn off relay"
            else:
                state = False
                response = "Unable to control relay"

            # publish the new state of the relay since it's a latched topic
            self.relay_state_pubs[relay].publish(Bool(self.relay_states[relay]))

        return SetBoolResponse(state, response)

    def control_relay_0(self, req):
        return self.control_relay(req, 0)

    def control_relay_1(self, req):
        return self.control_relay(req, 1)

    def control_relay_2(self, req):
        return self.control_relay(req, 2)

    def control_relay_3(self, req):
        return self.control_relay(req, 3)

    def control_relay_4(self, req):
        return self.control_relay(req, 4)

    def control_relay_5(self, req):
        return self.control_relay(req, 5)

    def control_relay_6(self, req):
        return self.control_relay(req, 6)

    def control_relay_7(self, req):
        return self.control_relay(req, 7)

    def read_gpio(self, num):
        # Send "gpio read" command
        self.serial_lock.acquire()
        self.serial_port.write(bytes(f"gpio read {num}\n\r".encode("utf-8")))

        # Response will be byte type; cast back to string.
        response = str(self.serial_port.read(self.SERIAL_READ_SIZE))
        self.serial_lock.release()

        if (response[-7] == "1"):
            return True
        elif (response[-7] == "0"):
            return False


if __name__ == "__main__":
    rospy.init_node('numato_relay_control_server')
    nri = NumatoRelayInterface()
    nri.run()
